# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

name: $(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
- master
- develop

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: ''
  imageRepository: 'angular'
  containerRegistry: 'mcrbattlestar.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  # TODO: Optional replace BuildId with BuildNumber
  # tag: '$(Build.BuildId)'
  tag: '$(Build.BuildNumber)'
  imagePullSecret: ''

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  vmWinImageName: 'windows-latest'
  binOnly: 'productionlocal'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build Develop and push an image to container registry
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop'))
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)-develop
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build Production and push an image to container registry
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)-production
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build BinOnly and push an image to container registry
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)-$(binOnly)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag).$(binOnly)

    - script: |
        CID=$(docker create $(containerRegistry)/$(imageRepository):$(tag).$(binOnly))
        docker cp $CID:/usr/share/dist ./dist
      displayName: Extract Binaries

    # - task: Docker@2
    #   displayName: Login to ACR
    #   inputs:
    #     command: login
    #     containerRegistry: $(dockerRegistryServiceConnection)

    # - task: Docker@2
    #   displayName: Copy image to host
    #   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    #   inputs:
    #     command: cp
    #     arguments: $(docker create $(imageRepository):$(tag).$(binOnly)):/usr/src/app/dist/docker-angular-starter ./$(binOnly)
        
    - script: ls -la $(Pipeline.Workspace)
      displayName: -> list Pipeline.Workspace
    - script: ls -la $(Pipeline.Workspace)/s
      displayName: -> list Pipeline.Workspace Source
    - script: ls -la $(Pipeline.Workspace)/s/dist
      displayName: -> list cp files        

    - upload: dist
      displayName: 'Upload Binaries'
      artifact: dist

    - upload: deployments
      displayName: 'Upload Manifests'
      artifact: manifests


- stage: DeployDevelop
  displayName: Deploy Develop
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'angular-develop.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo '$(mynonsecret)'
            displayName: '*** my non secrect - experiment'
          - script: echo '$(mysecret)'
            displayName: '*** my secrect - experiment'
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/develop/deployment.yml
                $(Pipeline.Workspace)/manifests/develop/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)


- stage: DeployBlobStorage
  displayName: Deploy Blob Storage
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'angular-stage.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: ls -la $(Pipeline.Workspace)/dist
            displayName: -> list cp files        
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/dist'
              includeRootFolder: true 
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/$(containerRegistry).$(imageRepository).$(tag).zip' 
          - script: ls -la $(Pipeline.Workspace)
            displayName: -> list Workspace files 

# Azure File Copy task https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-file-copy?view=azure-devops
# Create ARM Service Connection for field azureSubscription https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops#create-an-azure-resource-manager-service-connection-using-automated-security
          - task: AzureFileCopy@4
            inputs:
              sourcePath: '$(Pipeline.Workspace)/$(containerRegistry).$(imageRepository).$(tag).zip'
              azureSubscription: 'masc210317'
              destination: azureBlob
              storage: 'msa210317'
              containerName: 'myblob'
              #blobPrefix: # Optional
              #additionalArgumentsForBlobCopy: # Optional
              #enableCopyPrerequisites: false # Optional
              #copyFilesInParallel: true # Optional
              #cleanTargetBeforeCopy: false # Optional
              #skipCACheck: true # Optional
              #sasTokenTimeOutInMinutes: # Optional



- stage: DeployStage
  displayName: Deploy Stage
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
# TODO: Goto Enivronment Tab create new Environment angular-stage
    environment: 'angular-stage.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: ls -la $(Pipeline.Workspace)/dist
            displayName: -> list cp files        

          - script: echo '$(mynonsecret)'
            displayName: '*** my non secrect - experiment'
          - script: echo '$(mysecret)'
            displayName: '*** my secrect - experiment'
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/stage/deployment.yml
                $(Pipeline.Workspace)/manifests/stage/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployProd
  displayName: Deploy Production
  dependsOn: DeployStage
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
# TODO: Goto Enivronment Tab create new Environment angular-production
# TODO: Goto Environment Tab and add Approval on Production environment
    environment: 'angular-production.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo '$(mynonsecret)'
            displayName: '*** my non secrect - experiment'
          - script: echo '$(mysecret)'
            displayName: '*** my secrect - experiment'
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/production/deployment.yml
                $(Pipeline.Workspace)/manifests/production/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

